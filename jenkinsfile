node {
   
   def mvnHome
   def server = Artifactory.server 'jforgartifactory'
   def remote1 = [:]
    remote1.host = 'xyart81442dns1.eastus2.cloudapp.azure.com'
    remote1.user = "devopsinfra"
    remote1.password = "Husslefree12&#36;1"
    remote1.allowAnyHosts = true
   def remote2 = [:]
    remote2.host = 'xyart81442dns1.eastus2.cloudapp.azure.com'
    remote2.user = "devopsinfra"
    remote2.password = "Husslefree12&#36;1"
    remote2.allowAnyHosts = true
   
   stage('Git-Checkout') { // for display purposes
      // Get code from a GitHub repository
      git 'https://github.com/sandeepds/spring-petclinic.git'
      // Get the Maven tool.           
      mvnHome = tool 'M3'
   }
   
   stage('Sonarqube-scan'){
	//Run the sonar scan
	withSonarQubeEnv('sonarqube'){
	        sh 'mvn clean package sonar:sonar'
	}
   }
   
   stage('Quality-Gate') {
	timeout(time: 1, unit: 'MINUTES') {
	def qg = waitForQualityGate()
	  if (qg.status != 'OK') {
		currentBuild.status='FAILURE'
		error "Pipeline aborted due to quality gate failure: ${qg.status}"
	   }
        }
   }
   
   stage('Build') {
      // Run the maven build
      withEnv(["MVN_HOME=$mvnHome"]) {
         if (isUnix()) {
            sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'
         } else {
            bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
         }
      }
   }
   
   stage('Jfrog Artifactory Upload'){
   def uploadSpec = """ {  
	"files": [ { "pattern": "/var/lib/jenkins/workspace/sample/target/*.jar", "target": "example-repo-local" } ]  
        }"""  
        server.upload(uploadSpec) 
   }
   
   stage('Petclinic Docker Image') { 
	sh "sudo docker build -t sandeepds2002/petclinic ."
	sh "sudo docker push sandeepds2002/petclinic"
    }
    
   stage("Docker-compose"){
       sh "sudo docker-compose up -d --build"
   }
   
   stage('Playbook') {
        sSHLauncher remote: remote1, command: "rm -rf ~/ansible/spring-playbook.yaml"
        sshPut remote: remote1, from: 'spring-playbook.yaml', into: '/home/devopsinfra/ansible/spring-playbook.yaml'
        
        sSHLauncher remote: remote2, command: "rm -rf ~/ansible/pet-playbook.yaml"
        sshPut remote: remote2, from: 'spring-playbook.yaml', into: '/home/devopsinfra/ansible/spring-playbook.yaml'
    }
    stage('Run Playbook') {
        sSHLauncher remote: remote1, command: "cd ~/ansible; ansible-playbook -i inventory spring-playbook.yaml"
        sSHLauncher remote: remote2, command: "cd ~/ansible; ansible-playbook -i inventory spring-playbook.yaml"
    }
        
}
